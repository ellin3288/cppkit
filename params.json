{"name":"cppkit","tagline":"C++11 for the rest of us.","body":"### We care about ease of use.\r\nThe main idea of cppkit is that we are willing to sacrifice a little performance to gain usability. The end result will be a library that won't work for those who need the utmost performance, but will be a joy to use for everyone else. cppkit is an opinionated library that won't be right for everyone, and we think that's perfectly OK.\r\n\r\n### The cppkit ecosystem\r\ncppkit aims to be the base library in an ecosystem of C++11 libraries and attempts to set some conventions to make downstream use of the ecosystem easier. First and foremost, cppkit and all downstream libs should use cmake.\r\n\r\n* cppkit (and downstream libraries) will install their headers and libraries to a directory at the same level as the cppkit project called \"devel_artifacts\".\r\n* Headers for each library will go into their own subdirectory under \"devel_artifacts/include\". For example, a downstream library called \"foo\" would put it's headers in \"devel_artifacts/include/foo\".\r\n* Libraries for all downstream projects will install into \"devel_artifacts/lib\".\r\n* cppkit will install build support files into \"devel_artifacts/build\". Downstream projects should only have to define a few variables and then include the appropriate build support cmake file to get all of the default ecosystem behaviour.\r\n* By using the common build support files downstream libraries will automatically have \"devel_artifacts/include\" added to their compilers include search path. They will also have \"devel_artifacts/lib\" added to their library search path. Projects should include the headers of other projects like this: #include \"cppkit/ck_dynamic_library.h\"\r\n* Downstream libraries should define their own C++ namespace, and (unless they have VERY good reason not to) confine all of their symbols to their own namespace.","google":"UA-47862717-1","note":"Don't delete this file! It's used internally to help with page regeneration."}